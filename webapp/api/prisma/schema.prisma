generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email      String      @unique
  hash       String
  firstName  String?
  lastName   String?
  userType   String
  sentMessages     Message[] @relation("SentMessages")  // Relation name is specified here
  receivedMessages Message[] @relation("ReceivedMessages") // Relation name is specified here
  admin      Admin?      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  client     Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  contractor Contractor? @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  // relation fields
  clientId     Int? @unique
  adminId      Int? @unique
  contractorId Int? @unique

  @@map("users")
}

model Admin {
  id Int @id @default(autoincrement())

  user              User?
  isConfirmed       Boolean @default(false)
  isItemAdmin       Boolean @default(false)
  isClientAdmin     Boolean @default(false)
  isContractorAdmin Boolean @default(false)

  @@map("admins")
}

model Client {
  id Int @id @default(autoincrement())

  user              User?
  subscriptionLevel Int      @default(0)
  fidelityPoints    Int      @default(0)
  Address           Address? @relation(fields: [addressId], references: [id])
  events            Event[]
  courses           Course[]

  // relation fileds
  addressId Int? @unique

  @@map("clients")
}

model Contractor {
  id Int @id @default(autoincrement())

  user         User?
  presentation String?
  events       Event[]
  courses      Course[]

  @@map("contractors")
}

model Address {
  id Int @id @default(autoincrement())

  streetNumber String
  streetName   String
  city         String
  postalCode   String
  country      String
  client       Client?

  @@map("addresses")
}

model Event {
  id Int @id @default(autoincrement())

  type        String
  name        String
  description String?     @default("")
  startTime   DateTime
  durationMin Int
  animator    Contractor? @relation(fields: [contractorId], references: [id])
  clients     Client[]

  // relation fields
  contractorId Int?

  @@map("events")
}

model Course {
  id Int @id @default(autoincrement())

  name        String
  description String
  lessons     Lesson[]
  Contractor  Contractor? @relation(fields: [contractorId], references: [id])

  contractorId Int?
  clients      Client[]

  @@map("courses")
}

model Lesson {
  id Int @id @default(autoincrement())

  name        String
  description String
  content     String
  Course      Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  courseId Int?

  @@map("lessons")
}

model Message {
  id          Int      @id @default(autoincrement())
  
  createdAt   DateTime @default(now())   // To ensure the order of messages
  content     String

  senderId    Int
  sender      User    @relation(fields: [senderId], references: [id], name: "SentMessages")
  recipientId Int
  recipient   User    @relation(fields: [recipientId], references: [id], name: "ReceivedMessages")

  @@map("messages")
}
