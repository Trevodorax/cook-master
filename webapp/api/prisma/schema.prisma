generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// general user with common filelds from client, contractor and admin
model User {
  id Int @id @default(autoincrement())

  email            String    @unique
  hash             String // hashed password
  firstName        String?
  lastName         String?
  userType         String // "client", "contractor" or "admin"
  profilePicture   String    @default("https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg") // can be url or base64 (we'll prefer url for efficiency issues)
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  // can have only one of those 3 (according to userType)
  admin      Admin?      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  client     Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  contractor Contractor? @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  locale     String      @default("en") // can be "en", "fr", "it" or "es"

  // relation fields
  clientId     Int? @unique
  adminId      Int? @unique
  contractorId Int? @unique

  @@map("users")
}

model Admin {
  id Int @id @default(autoincrement())

  user              User?
  isConfirmed       Boolean @default(false)
  isItemAdmin       Boolean @default(false)
  isClientAdmin     Boolean @default(false)
  isContractorAdmin Boolean @default(false)

  @@map("admins")
}

model Client {
  id Int @id @default(autoincrement())

  user              User?
  subscriptionLevel Int                    @default(0) // can be 0, 1 or 2
  fidelityPoints    Int                    @default(25)
  Address           Address?               @relation(fields: [addressId], references: [id])
  events            Event[]                @relation(name: "Participant")
  courses           Course[]
  progressions      ClientCourseProgress[]
  atHomeWorkshops   Event[]                @relation(name: "ParticipantAtHome")
  invoices          Invoice[]

  // relation fileds
  addressId Int? @unique

  @@map("clients")
}

model Contractor {
  id Int @id @default(autoincrement())

  user         User?
  presentation String?
  serviceType  String   @default("courses") // the service provided by the contractor
  serviceCost  Int      @default(0) // how much the service costs per hour
  events       Event[]
  courses      Course[]
  serviceType  String   @default("courses")
  serviceCost  Int      @default(0)

  @@map("contractors")
}

model Address {
  id Int @id @default(autoincrement())

  streetNumber String
  streetName   String
  city         String
  postalCode   String
  country      String

  // lon and lat are automatically created by the api when an address is set (don't initialize in seed)
  longitude Float?
  latitude  Float?

  client  Client?
  premise Premise?

  @@map("addresses")
}

model Event {
  id Int @id @default(autoincrement())

  type        String // can be "workshop", "tasting" or whatever type of cooking event
  name        String
  description String?     @default("")
  startTime   DateTime
  durationMin Int // can range between 30 minutes and 600 minutes
  course      Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  animator    Contractor? @relation(fields: [contractorId], references: [id])

  // those must not all be set at the same time.
  // there is either:
  // - an atHomeClient and nothing else
  // - a room and a clients list
  // - isOnline true and a clients list
  atHomeClient Client?  @relation(name: "ParticipantAtHome", fields: [atHomeClientId], references: [id])
  clients      Client[] @relation(name: "Participant")
  room         Room?    @relation(fields: [roomId], references: [id])
  isOnline     Boolean  @default(false)

  // relation fields
  contractorId   Int?
  courseId       Int?
  atHomeClientId Int?
  roomId         Int?

  @@map("events")
}

// progress of a client in a course
model ClientCourseProgress {
  client      Client @relation(fields: [clientId], references: [id])
  course      Course @relation(fields: [courseId], references: [id])
  progression Int    @default(0) // cannot be more than the number of lessons in the course

  clientId Int
  courseId Int

  @@id([clientId, courseId])
  @@map("client_course_progress")
}

model Course {
  id Int @id @default(autoincrement())

  name        String
  description String
  lessons     Lesson[]
  workshops   Event[]
  Contractor  Contractor? @relation(fields: [contractorId], references: [id])
  clients     Client[]

  contractorId Int?
  progressions ClientCourseProgress[]

  @@map("courses")
}

model Lesson {
  id Int @id @default(autoincrement())

  name        String
  description String
  content     String // in markdown format
  index       Int // index of the lesson in the course
  Course      Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  courseId Int?

  @@unique([courseId, index])
  @@map("lessons")
}

model Message {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) // to ensure the order of messages
  content   String

  senderId    Int
  sender      User @relation(fields: [senderId], references: [id], name: "SentMessages")
  recipientId Int
  recipient   User @relation(fields: [recipientId], references: [id], name: "ReceivedMessages")

  @@map("messages")
}

model Premise {
  id Int @id @default(autoincrement())

  rooms   Room[]
  address Address @relation(fields: [addressId], references: [id])

  addressId Int @unique
}

model Room {
  id Int @id @default(autoincrement())

  Premise  Premise @relation(fields: [premiseId], references: [id], onDelete: Cascade)
  capacity Int
  events   Event[]

  premiseId Int
}

// gets created each time a client requests access to a lesson
// allows us to know how many accesses he got today to limit him
model ClientCourseRequest {
  id Int @id @default(autoincrement())

  clientId    Int
  courseId    Int
  requestedAt DateTime @default(now())

  @@map("client_course_requests")
}

model Invoice {
  id Int @id @default(autoincrement())

  total    Int      @default(0)
  boughtAt DateTime @default(now())
  Client   Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  clientId Int?
}
