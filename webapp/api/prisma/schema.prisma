generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email             String      @unique
  hash              String
  firstName         String?
  lastName          String?
  userType          String
  profilePicture    String      @default("https://t4.ftcdn.net/jpg/00/64/67/63/360_F_64676383_LdbmhiNM6Ypzb3FM4PPuFP9rHe7ri8Ju.jpg")
  sentMessages      Message[]   @relation("SentMessages")
  receivedMessages  Message[]   @relation("ReceivedMessages")
  admin             Admin?      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  client            Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  contractor        Contractor? @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  // relation fields
  clientId     Int? @unique
  adminId      Int? @unique
  contractorId Int? @unique

  @@map("users")
}

model Admin {
  id Int @id @default(autoincrement())

  user              User?
  isConfirmed       Boolean @default(false)
  isItemAdmin       Boolean @default(false)
  isClientAdmin     Boolean @default(false)
  isContractorAdmin Boolean @default(false)

  @@map("admins")
}

model Client {
  id Int @id @default(autoincrement())

  user              User?
  subscriptionLevel Int                     @default(0)
  fidelityPoints    Int                     @default(25)
  Address           Address?                @relation(fields: [addressId], references: [id])
  events            Event[]                 @relation(name: "Participant")
  courses           Course[]
  progressions      ClientCourseProgress[]
  atHomeWorkshops   Event[]                 @relation(name: "ParticipantAtHome")

  // relation fileds
  addressId Int? @unique

  @@map("clients")
}

model Contractor {
  id Int @id @default(autoincrement())

  user         User?
  presentation String?
  events       Event[]
  courses      Course[]

  @@map("contractors")
}

model Address {
  id Int @id @default(autoincrement())

  streetNumber String
  streetName   String
  city         String
  postalCode   String
  country      String
  client       Client?
  premise      Premise?

  @@map("addresses")
}

model Event {
  id Int @id @default(autoincrement())

  type          String
  name          String
  description   String?     @default("")
  startTime     DateTime
  durationMin   Int
  course        Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  animator      Contractor? @relation(fields: [contractorId], references: [id])
  atHomeClient  Client?     @relation(name: "ParticipantAtHome", fields: [atHomeClientId], references: [id])
  clients       Client[]    @relation(name: "Participant")
  room          Room?       @relation(fields: [roomId], references: [id])
  isOnline      Boolean     @default(false)

  // relation fields
  contractorId Int?
  courseId Int?
  atHomeClientId Int?
  roomId Int?

  @@map("events")
}

model ClientCourseProgress {
  client   Client  @relation(fields: [clientId], references: [id])
  course   Course  @relation(fields: [courseId], references: [id])
  progression Int  @default(0)

  clientId Int
  courseId Int

  @@id([clientId, courseId])
  @@map("client_course_progress")
}

model Course {
  id Int @id @default(autoincrement())

  name        String
  description String
  lessons     Lesson[]
  workshops   Event[]
  Contractor  Contractor? @relation(fields: [contractorId], references: [id])
  clients     Client[]

  contractorId Int?
  progressions ClientCourseProgress[]

  @@map("courses")
}

model Lesson {
  id Int @id @default(autoincrement())

  name        String
  description String
  content     String
  index       Int 
  Course      Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  courseId Int?

  @@unique([courseId, index])

  @@map("lessons")
}

model Message {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now()) // To ensure the order of messages
  content   String

  senderId    Int
  sender      User @relation(fields: [senderId], references: [id], name: "SentMessages")
  recipientId Int
  recipient   User @relation(fields: [recipientId], references: [id], name: "ReceivedMessages")

  @@map("messages")
}

model Premise {
  id Int @id @default(autoincrement())

  rooms   Room[]
  address Address @relation(fields: [addressId], references: [id])

  addressId Int @unique
}

model Room {
  id Int @id @default(autoincrement())

  Premise   Premise @relation(fields: [premiseId], references: [id], onDelete: Cascade)
  capacity  Int
  events    Event[]

  premiseId Int
}
